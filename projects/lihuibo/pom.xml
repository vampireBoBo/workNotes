<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com</groupId>
  <artifactId>lihuibo</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <name>lihuibo项目集合</name>
  <description>用于不同知识点的测试项目</description>
  <!-- 版本配置 -->
  <properties>
  		<spring.version>4.3.7.RELEASE</spring.version>
		<mybatis.version>3.4.2</mybatis.version>
		<mybatis.spring.version>1.3.0</mybatis.spring.version>
		<mysql.version>5.1.30</mysql.version>
		<druid.version>1.0.28</druid.version>
		<shiro.version>1.7.1</shiro.version>
		<generator.version>1.3.5</generator.version>
  </properties>
  
  <!-- 依赖 -->
  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>3.8.1</version>
      <scope>test</scope>
    </dependency>
	<dependency>
		<groupId>com.alibaba</groupId>
		<artifactId>fastjson</artifactId>
		<version>1.2.47</version>
	</dependency>
  </dependencies>
  
  <!-- 子级依赖管理  -->
  <dependencyManagement>
  	<dependencies>
  		<!-- Mybatis -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis.spring.version}</version>
		</dependency>
		<!-- MySql -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.version}</version>
		</dependency>
		<!-- 连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid.version}</version>
		</dependency>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- shiro -->
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		<!-- mybatis generator 自动化jar -->
		<dependency>
		    <groupId>org.mybatis.generator</groupId>
		    <artifactId>mybatis-generator-core</artifactId>
		    <version>${generator.version}</version>
		</dependency>
		<!-- jsp -->
		<dependency>
		    <groupId>javax.servlet</groupId>
		    <artifactId>javax.servlet-api</artifactId>
		    <version>3.1.0</version>
		    <scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api -->
		<dependency>
		    <groupId>javax.servlet.jsp</groupId>
		    <artifactId>javax.servlet.jsp-api</artifactId>
		    <version>2.3.1</version>
		    <scope>provided</scope>
		</dependency>
		<!-- jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		
  	</dependencies>
  </dependencyManagement>
  
  <build>
  	<!-- 子级插件管理 -->
  	<pluginManagement>
  		<plugins>
  			<!-- 
	   			利用 mybaits-generator  自动生成代码 
	   			注意点：
	   				1、使用maven指令去自动生成代码 所以 不需要在项目的dependencies中添加对应jar依赖，只需要在plugin中指定后会获取对应jar
	   				2、若xml的路径及名称不是约定的，则需要在plugin中的configuration中指定xml的具体路径
	   				3、通过plugin中的dependenties中mysql的jar依赖 指定对应的mysql的驱动，则不需要在xml文件指定本地项目的mysql驱动包的位置
	   				4、xml的配置文件中context的元素具有一定的声明顺序，必须严格遵循。若项目的指定路径从src路径开始。则对应maven指令中文件则需要从工作空间中进行获取。
	   				5、maven指令：指定文件位置（通过工作空间获取）、 goals（mybatis-generator:generate） 、手动配置maven仓库setting文件路径及软件路径
    				
	    	-->
	    	<plugin>
	    		<groupId>org.mybatis.generator</groupId>
	    		<artifactId>mybatis-generator-maven-plugin</artifactId>
	    		<version>1.3.5</version>
	    		<configuration>
	    			<verbose>true</verbose>
	    			<overwrite>true</overwrite>
	    			<configurationFile>src/main/resources/util/generatorConfig.xml</configurationFile>
	    		</configuration>
	    		<dependencies>
	    			 <!-- 数据库驱动 -->
			          <dependency>
						    <groupId>mysql</groupId>
						    <artifactId>mysql-connector-java</artifactId>
						    <version>5.1.30</version>
					  </dependency>
	    		</dependencies>
	    	</plugin>
	    	<plugin>  
		       	<groupId>org.apache.maven.plugins</groupId>  
		       	<artifactId>maven-compiler-plugin</artifactId>  
		       	<version>2.3.2</version>  
		       	<configuration>  
		        	<source>1.8</source>  
		           	<target>1.8</target> 
		           	<encoding>UTF-8</encoding> 
		       	</configuration>  
	   		</plugin> 
  		</plugins>
  	</pluginManagement>
  </build>
  <!-- 子级模块 -->
  <modules>
  	<module>lhb-pdf</module>
  	<module>lhb-shiro</module>
  </modules>
</project>